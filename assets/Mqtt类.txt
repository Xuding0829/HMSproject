MqttHelper工具类，可以程序里调用此类接口，完成初始化、订阅主题，发布主题，回调函数等。

（activity文件）
package com.example.bdmaptest

// MqttHelper.kt

import android.content.ContentValues.TAG
import android.util.Log
import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken
import org.eclipse.paho.client.mqttv3.MqttCallback
import org.eclipse.paho.client.mqttv3.MqttClient
import org.eclipse.paho.client.mqttv3.MqttConnectOptions
import org.eclipse.paho.client.mqttv3.MqttException
import org.eclipse.paho.client.mqttv3.MqttMessage
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence
import java.util.concurrent.Executors
import java.util.concurrent.ScheduledExecutorService
import java.util.concurrent.TimeUnit

class MqttHelper(private val mqttId: String,
                 private val subscriptionTopics: List<String>,
                 private val publishTopics: List<String>) {

    private val host: String = "tcp://47.120.33.16:1883" // 例如 "tcp://mqtt.example.com:1883"
    private var client: MqttClient? = null
    private var options: MqttConnectOptions? = null

    private val scheduler: ScheduledExecutorService = Executors.newSingleThreadScheduledExecutor()
    init {
        setupMqttClient()
        connect()
    }

    private fun setupMqttClient() {
        try {
            client = MqttClient(host, mqttId, MemoryPersistence())
            options = MqttConnectOptions().apply {
                isCleanSession = true
                connectionTimeout = 10
                keepAliveInterval = 20
            }

            client?.setCallback(object : MqttCallback {
                override fun connectionLost(cause: Throwable) {
                    println("连接失败，尝试重连")
                    startReconnect()
                }

                override fun messageArrived(topic: String, message: MqttMessage) {
                    println("消息来自： $topic: $message")


                }

                override fun deliveryComplete(token: IMqttDeliveryToken) {
                    println("令牌来自: ${token.messageId}")
                }
            })
        } catch (e: MqttException) {
            e.printStackTrace()
        }
    }


    private fun connect() {
        try {
            if (!client!!.isConnected) {
                client!!.connect(options)
                subscriptionTopics.forEach { topic ->
                    client!!.subscribe(topic)
                }
            }
        } catch (e: MqttException) {
            e.printStackTrace()
        }
    }


    fun startReconnect() {
        scheduler.scheduleAtFixedRate({
            if (!client!!.isConnected) {
                try {
                    connect()
                } catch (e: MqttException) {
                    println("Reconnect attempt failed: ${e.message}")
                    // 错误处理逻辑
                }
            }
        }, 0, 10, TimeUnit.SECONDS)
    }


    fun publishMessage(topic: String, messageStr: String) {
        if (publishTopics.contains(topic)) {
            val message = MqttMessage()
            message.payload = messageStr.toByteArray()
            try {
                client?.publish(topic, message)
            } catch (e: MqttException) {
                e.printStackTrace()
            }
        } else {
            println("主题 $topic 不在可发布列表主题内.")
        }
    }


    fun subscribeToTopic(topic: String, qos: Int) {
        try {
            if (client?.isConnected == true) {
                client?.subscribe(topic, qos)
                Log.d(TAG, "Subscribed to $topic")
            } else {
               Log.d(TAG,"客户端未连接，未收到订阅主题： $topic.")
            }
        } catch (e: MqttException) {
            e.printStackTrace()
        }
    }

    fun setCallback(callback: MqttCallback) {
        client?.setCallback(callback)
    }




    fun disconnect() {
        try {
            if (client?.isConnected == true) {
                // Unsubscribe from all subscribed topics before disconnecting
                subscriptionTopics.forEach { topic ->
                    client?.unsubscribe(topic)
                }

                // Disconnect the MQTT client
                client?.disconnect()

                println("Disconnected from MQTT broker.")
            }
        } catch (e: MqttException) {
            e.printStackTrace()
            println("Error occurred during MQTT disconnection: ${e.message}")
        } finally {
            // Optionally close the client if you are not going to use it anymore
            client?.close()
        }
    }

}


订阅部分：
//订阅坐标的MQTT主题
        mqttHelper.subscribeToTopic("catdingyue", 1)
        mqttHelper.subscribeToTopic("\$SYS/brokers/emqx@127.0.0.1/clients/mouse/connected", 1)
        mqttHelper.subscribeToTopic("\$SYS/brokers/emqx@127.0.0.1/clients/mouse/disconnected", 1)
//后两个是订阅了客户端的上下线信息，一般用不到
        mqttHelper.setCallback(mqttCallback)  //回调函数

    }

发布部分：
  // 发布当前位置到指定的 MQTT 主题
    private fun publishLocation() {
        val topic = "catfabu"
        remainingTime= countDownView.getRemainingTime()
        var minutescat =  (remainingTime.toInt() / 60/1000).toLong()
        var secondscat =(remainingTime.toInt()% 60).toLong()
        val message = "功能：${catskill}，纬度：${baiduMapManager.currentLatitude}，经度：${baiduMapManager.currentLongitude}，分钟：${minutescat}，秒：${secondscat}"
        mqttHelper.publishMessage(topic, message)

    }


回调部分：（指的是接受到mqtt服务器的消息后的处理逻辑）
  private val mqttCallback = object : MqttCallback {
            override fun messageArrived(topic: String, message: MqttMessage) {
                val msg = message.toString()
                if (msg.contains("\"disconnected_at\"")) {
                    runOnUiThread {
                        textView.setText("对方状态为：     离线");
                    }
                } else (runOnUiThread {
                    //publishtime()
                    textView.setText("对方状态为：     在线")
                })
//。。。。中间省略。。。。
}









